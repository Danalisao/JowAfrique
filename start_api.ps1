# Script PowerShell pour d√©marrer l'API JowAfrique
param(
    [switch]$Test,
    [switch]$Help
)

if ($Help) {
    Write-Host "üçΩÔ∏è  JowAfrique API Starter" -ForegroundColor Green
    Write-Host "Usage: .\start_api.ps1 [-Test] [-Help]"
    Write-Host ""
    Write-Host "Options:"
    Write-Host "  -Test    Teste l'API apr√®s le d√©marrage"
    Write-Host "  -Help    Affiche cette aide"
    exit 0
}

Write-Host "=" * 50 -ForegroundColor Cyan
Write-Host "üçΩÔ∏è  JowAfrique API Starter" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Cyan

# V√©rifier Python
Write-Host "üîç V√©rification de Python..." -ForegroundColor Yellow
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python trouv√©: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python non trouv√©. Installez Python 3.8+ depuis https://python.org" -ForegroundColor Red
    exit 1
}

# V√©rifier les d√©pendances
Write-Host "üîç V√©rification des d√©pendances..." -ForegroundColor Yellow
try {
    python -c "import flask, flask_cors" 2>$null
    Write-Host "‚úÖ D√©pendances install√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ùå D√©pendances manquantes. Installation..." -ForegroundColor Yellow
    pip install flask flask-cors
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå √âchec de l'installation des d√©pendances" -ForegroundColor Red
        exit 1
    }
}

# V√©rifier la base de donn√©es
Write-Host "üîç V√©rification de la base de donn√©es..." -ForegroundColor Yellow
if (Test-Path "backend\jowafrique.db") {
    Write-Host "‚úÖ Base de donn√©es trouv√©e" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Base de donn√©es non trouv√©e, elle sera cr√©√©e automatiquement" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìã Informations de l'API:" -ForegroundColor Cyan
Write-Host "   URL: http://localhost:5000" -ForegroundColor White
Write-Host "   Health Check: http://localhost:5000/api/health" -ForegroundColor White
Write-Host "   Documentation: http://localhost:5000/api/" -ForegroundColor White
Write-Host ""
Write-Host "üí° Appuyez sur Ctrl+C pour arr√™ter l'API" -ForegroundColor Yellow
Write-Host "=" * 50 -ForegroundColor Cyan

# D√©marrer l'API
Write-Host "üöÄ D√©marrage de l'API..." -ForegroundColor Green
Set-Location backend

try {
    if ($Test) {
        # D√©marrer l'API en arri√®re-plan pour les tests
        $job = Start-Job -ScriptBlock { python api.py }
        
        # Attendre que l'API d√©marre
        Write-Host "‚è≥ Attente du d√©marrage de l'API..." -ForegroundColor Yellow
        Start-Sleep -Seconds 5
        
        # Tester l'API
        Write-Host "üß™ Test de l'API..." -ForegroundColor Yellow
        try {
            $response = Invoke-RestMethod -Uri "http://localhost:5000/api/health" -Method Get -TimeoutSec 10
            Write-Host "‚úÖ API op√©rationnelle: $($response.status)" -ForegroundColor Green
            Write-Host "üìä Version: $($response.version)" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur lors du test de l'API: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Arr√™ter le job
        Stop-Job $job
        Remove-Job $job
    } else {
        # D√©marrer l'API normalement
        python api.py
    }
} catch {
    Write-Host "‚ùå Erreur lors du d√©marrage: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    Set-Location ..
}
